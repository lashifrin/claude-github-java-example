name: Claude Issue Assistant

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  claude-assistant:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Claude Issue Analysis
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      with:
        script: |
          const { execSync } = require('child_process');
          
          const issueTitle = context.payload.issue.title;
          const issueBody = context.payload.issue.body || '';
          
          // Skip if it's a bot or if it already has Claude response
          if (context.payload.issue.user.type === 'Bot') return;
          
          const existingComments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const hasClaudeResponse = existingComments.data.some(comment => 
            comment.body.includes('ðŸ¤– Claude AI Assistant')
          );
          
          if (hasClaudeResponse) return;
          
          // Get project context
          const projectFiles = execSync('find . -name "*.java" -o -name "*.xml" | head -5 | xargs cat', { encoding: 'utf8' });
          
          const analysisPrompt = `
          You are a helpful AI assistant for a Java project. A user has created an issue:
          
          **Title:** ${issueTitle}
          
          **Description:** 
          ${issueBody}
          
          **Project Context:**
          \`\`\`
          ${projectFiles.substring(0, 2000)}
          \`\`\`
          
          Please provide:
          1. Analysis of the issue
          2. Potential solutions or suggestions
          3. Code examples if applicable
          4. Next steps or recommendations
          
          Keep your response helpful, concise, and actionable. Format in markdown.
          `;
          
          try {
            const curlCommand = `curl -s -X POST https://api.anthropic.com/v1/messages \\
              -H "Content-Type: application/json" \\
              -H "x-api-key: $ANTHROPIC_API_KEY" \\
              -H "anthropic-version: 2023-06-01" \\
              -d '{
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 1500,
                "messages": [
                  {
                    "role": "user",
                    "content": ${JSON.stringify(analysisPrompt)}
                  }
                ]
              }'`;
            
            const response = execSync(curlCommand, { encoding: 'utf8' });
            console.log('Claude API Response:', response);
            const claudeResponse = JSON.parse(response);
            console.log('Parsed response:', claudeResponse);
            
            if (!claudeResponse.content || !claudeResponse.content[0]) {
              throw new Error('Invalid response format from Claude API');
            }
            
            const assistantContent = claudeResponse.content[0].text;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ¤– Claude AI Assistant\n\n${assistantContent}\n\n---\n*This analysis was generated by Claude AI. Please review and verify any suggestions.*`
            });
            
          } catch (error) {
            console.error('Error calling Claude API:', error);
          }
    
    - name: Claude Comment Response
      if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')
      uses: actions/github-script@v7
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      with:
        script: |
          const { execSync } = require('child_process');
          
          // Skip if it's a bot commenting
          if (context.payload.comment.user.type === 'Bot') return;
          
          const commentBody = context.payload.comment.body;
          const issueTitle = context.payload.issue.title;
          const issueBody = context.payload.issue.body || '';
          
          const responsePrompt = `
          You are Claude AI assistant. A user mentioned you in a GitHub issue comment:
          
          **Original Issue:** ${issueTitle}
          **Issue Description:** ${issueBody}
          **User Comment:** ${commentBody}
          
          Please provide a helpful response addressing their comment. Keep it concise and actionable.
          `;
          
          try {
            const curlCommand = `curl -s -X POST https://api.anthropic.com/v1/messages \\
              -H "Content-Type: application/json" \\
              -H "x-api-key: $ANTHROPIC_API_KEY" \\
              -H "anthropic-version: 2023-06-01" \\
              -d '{
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 1000,
                "messages": [
                  {
                    "role": "user",
                    "content": ${JSON.stringify(responsePrompt)}
                  }
                ]
              }'`;
            
            const response = execSync(curlCommand, { encoding: 'utf8' });
            console.log('Claude API Response:', response);
            const claudeResponse = JSON.parse(response);
            
            if (!claudeResponse.content || !claudeResponse.content[0]) {
              throw new Error('Invalid response format from Claude API');
            }
            
            const assistantContent = claudeResponse.content[0].text;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `@${context.payload.comment.user.login} ${assistantContent}\n\n---\n*ðŸ¤– Claude AI Assistant*`
            });
            
          } catch (error) {
            console.error('Error calling Claude API:', error);
          }